Class 01--

TestNG: is a testing tool that helps us to structure our test cases using different annotations.
Benefits of testNG:
    1. Reports
    2. Annotations: e.g @Test, @Before, @Beforeclass
    3. Parallel Testing – running all tests at the same time
    4. Batch execution – selective execution
    5. Assertions – verify and validate – Hard Assertions, Soft Assertions.
    6. Data Parameterization.

It can be integrated with cucumber, maven, and selenium.

1. Annotations:
    - We do not need any main method.
    - Annotation is a tag that provides additional information about the class, interface, or method in TestNG.
    - Annotations are used to keep the structure of test cases.

@Test
@BeforeMethod
@AfterMethod
@BeforeClass
@AfterClass

1. @Test
	- You should write your test cases under this annotation.
	- This is the main annotation in TestNG.
	- By default, TestNG executes the methods by alphabetical order.

2. @BeforeMethod:
    - Run every time before the @Test is executed
    - Also called precondition

3. @AfterMethod:
    - Run after each @Test method
    - Also called post condition

Before method is precondition that must run before every test case and the post condition will run after the test case
has ended.

Priority:
    - By default, the priority is zero of all the test case
    in order to give them a priority order
    use @Test(priority = 1)

Enabled:
    (enabled=false) --> will not run the test cases that are set false
    - by default all test cases are set to enabled=true

DependsOn:
    @Test(dependsOnMethods = "login")
    - will only run if the dependent method has passed successfully else it will be skipped

HardAssertions:
    - We have hardAssertions in TestNG
    - In order to use the assertion, we use
                             Assert.assertiontype()

    1. Assert.AssertTrue(boolean variable);
        Check the state of a boolean variable
        It passes if the boolean is true
        It fails if the boolean is false


    2. Assert.AssertEquals(String1, String2);
        It passes if String1 equals String2
        It fails if String1 does not equals to String2

    - In hard assertions if we have multiple assertions, as soon as one of them fails, it quits checking other assertions
    and declared the test case has failed

Soft Assertions:
   - Soft assertion continue to check all the assertions regardless of the fact even if one or more assertions have failed,
    which is not the scenario in case of Hard Assertions (they stop execution when even one assertion fails).
   - In order to use soft assertion
            1. Declaration
                SoftAssert soft = new SoftAssert();
            2. Compare
                soft.AssertEquals(String, String) instead of Assert.AssertEquals(String, String)
            3. At the end you must do to combine everything to show the result
                soft.AssertAll()
   - After the declaration when you use soft.assert, it just checks the assertion but does not take any action or display
   any output.
   - Once tall the assertions are done then you use soft.AsserAll() to compile the result of all the assertion and show
   you the results screen.


Class 2 --

What Is TestNG.Xml?
TestNG.xml file is a configuration file that helps in organizing our tests.
It allows testers to create and handle multiple test classes, define test suites and tests.

It makes a tester’s job easier by controlling the execution of
 tests by putting all the test cases together and run it under one XML file.
  This is a beautiful concept, without which, it is difficult to work in TestNG.

Advantages Of TestNG.xml
Major advantages of TestNG.xml file are:

It provides parallel execution of test methods.
It allows the dependency of one test method on another test method.
It helps in prioritizing our test methods.
It allows grouping of test methods into test groups.
It supports the parameterization of test cases using @Parameters annotation.
It helps in Data-driven testing using @DataProvider annotation.
It has different types of assertions that help in validating the expected results with the actual results.
It has different types of HTML reports, Extent reports, etc. for a better and clear understanding of our test summary.
It has listeners who help in creating logs.

Concepts Used In TestNG.xml
#1) A Suite is represented by one XML file. It can contain one or more tests and is defined by the <suite> tag.

Example: <suite name=”Testing Google Apps”>

#2) A Test is represented by <test> and can contain one or more TestNG classes.

Example: <test name=”Regression”>

#3) A Class is a Java class that contains TestNG annotations. Here it is represented by the <class> tag and can contain one or more test methods.

testNG XML: give you control over the execution of your whole project!

<suite>
    <test>

        <classes>
            <method>
            </method>
        </classes>

        <package>

        </package>

    </test>
</suite>

1.Class wise execution
you can control which class u want to execute using xml , u can execute multiple classes also
e.g
for one class
<suite name="All Test Suite">
    <test verbose="2" preserve-order="true" name="C:/Users/moazzam/Desktop/testNGbatch12new/TestNGBasicsBatch12">
      <classes>
          <class name="class01.BasicAnnotations"></class>

      </classes>
    </test>
</suite>

for two classes
<suite name="All Test Suite">
    <test verbose="2" preserve-order="true" name="C:/Users/moazzam/Desktop/testNGbatch12new/TestNGBasicsBatch12">
      <classes>
          <class name="class01.Priorities"></class>
           <class name="class01.DependsOn"></class>
      </classes>
    </test>
</suite>





2.Mehtod wise execution
you can control which method in a particular class to execute and which not to by using xml in testng
e.g:
<suite name="All Test Suite">
    <test verbose="2" preserve-order="true" name="test">
       <classes>
           <class name="class01.BasicAnnotations">
               <methods>
                   <include name="bthirdTest"/>
                   <exclude name="cfourthTest"/>
               </methods>
           </class>
       </classes>
    </test>
</suite>

here it will execute just the method bthird test located in class Basicannotations
exclude elimantes all the methods u name , helps u actively run or not run a test case by xml


3.Package wise execution
you can run all the classes in one package using xml
e.g
<suite name="All Test Suite">
    <test verbose="2" preserve-order="true" name="TestNGBasicsBatch12">
    <packages>
        <package name="class02"></package>
    </packages>
    </test>
</suite>



Important points
1.you can not run duplicate classes in one test
<test verbose="2" preserve-order="true" name="test">
       <classes>
           <class name="class01.BasicAnnotations">
            <class name="class01.BasicAnnotations">
           </class>
       </classes>
    </test>
---->will not run it twice
2.in order to run a class mutiple times declare two test separatley
<test verbose="2" preserve-order="true" name="test">
       <classes>
           <class name="class01.BasicAnnotations">
       </classes>
    </test>
    <test verbose="2" preserve-order="true" name="test">
       <classes>
           <class name="class01.BasicAnnotations">
       </classes>
    </test>

--> will work


@BeforeClass
    - this annotation is used to execute the method only once before the execution of the class tag

@AfterClass
    - this annotation is used to execute the method only once after the execution of the class tag

@BeforeTest:
    - this annotation is used to execute the method only once before the execution of the test tag(the whole package)

@AfterTest:
    - this annotation is used to execute the method only once after the execution of the test tag(the whole package)

@BeforeSuite:
    - this annotation is used to execute the method only once before the execution of the suite tag(the whole project)

@AfterSuite:
    - this annotation is used to execute the method only once after the execution of the suite tag(the whole project)


<suite>
    <test>
        <groups>
            <run>
                <include name="smoke"/>
            </run>
        </groups>
        <packages>
            <package name="class01"></package>
        </packages>
    </test>
</suite>

- Whenever you run by groups, the @BeforeMethod and @AfterMethod do not run, because they are not under the tag group.
(Because it will run strictly when you run under tag group. Only the method has that group tag name will run)
- When we run by method name, @BeforeMethod and @AfterMethod runs


Class 03 --

TestNG XML?
    help us to control the execution of the test cases!!!!

1.
<suite>
    <test>
        <classes>
            <class name = "class name"/>

            <class name = "anther class name">
                <methods>
                    <include name ="method name"/>
                    <exclude name ="method name dont want to execute"/>
                </methods>
            </class>

            <packages>
                <package name ="package name">

                </package>
            </package>

    </test>
</suite>

When we run a specific method from a class, if it has any before and after method, they will also be execute even if
we don not select them to run.

Executing our test cases on group level.
    1. When we execute in our XML using groups, by default the @BeforeMethod and @AfterMethod WILL NOT EXECUTE!!!
    ONLY the methods tagged under the particular group will be executed.
    2. In order to deal with this problem, because if we have any @BeforeMethod where we are doing some initialization
    we use the following method
        put(alwaysRun ="true") in front of your @BeforeMethod and @AfterMethod
    3. Whenever you're running by groups and you get an error of NULL pointer Exception, the first thing to check is
    "@BeforeMethod is set to alwaysRun = true"


Listeners:
    - Listeners class listen to events like failed/ passed/ skipped etc.
    - Once the test case has executed, and it either fail pass skip, depending upon the status, Listeners class take you
    to the execution of the code that you have written for the scenarios if you test fail pass or skip

Implementation of Listeners Class:
    - which is an interface from TestNG, and we override the functions according to our need.
    - After that you need to link the listeners class to the class on which you want to listen that can be done using
    TestNG.XML
    - You define your <listeners> tag just under <suite> and then write down the classes you want it to listen to.


DataProvider in TestNG:
    - is used for data driven testing.
    - use data provider for small data sets for greater one use excel.
    - if we want to declare our data set, it must be under @DataProvider
    - if we want our test case to utilize this DataProvider, we need to:
    @Test(dataProvider = "name of data provider")
    public void test(){

    }






